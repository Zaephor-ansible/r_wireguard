{% set local_key_private = lookup('file', '/etc/wireguard/' + wg_network + '.priv') -%}
{% set local_key_public = lookup('file', '/etc/wireguard/' + wg_network + '.pub') -%}
{% set local_record = (wg_peers | selectattr("key_public", "==", local_key_public) | list | first | default({})) -%}
[Interface]
PrivateKey = {{ local_key_private }}
MTU = {{ wg_mtu }}
{% if 'address' in local_record %}
Address = {{ local_record.address }}
{% endif %}
{% if 'endpoint' in local_record %}
ListenPort = {{ wg_port }}
{% endif %}
{% if wg_mode | default(false) %}
{% if wg_mode == "bridge" %}
#PostUp   = iptables -w -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o {{ ansible_default_ipv4.interface }} -j MASQUERADE
#PostDown = iptables -w -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o {{ ansible_default_ipv4.interface }} -j MASQUERADE
#PostUp   = iptables -w -A FORWARD -i %i -j ACCEPT; iptables -w -A FORWARD -o %i -j ACCEPT; iptables -w -t nat -A POSTROUTING -o %i -j MASQUERADE
#PostDown = iptables -w -D FORWARD -i %i -j ACCEPT; iptables -w -D FORWARD -o %i -j ACCEPT; iptables -w -t nat -D POSTROUTING -o %i -j MASQUERADE
PostUp   = iptables -w -A FORWARD -i %i -j ACCEPT; iptables -w -A FORWARD -o %i -j ACCEPT
PostDown = iptables -w -D FORWARD -i %i -j ACCEPT; iptables -w -D FORWARD -o %i -j ACCEPT
{% elif wg_mode == "relay" %}
PostUp   = iptables -w -A FORWARD -i %i -j ACCEPT; iptables -w -A FORWARD -o %i -j ACCEPT; iptables -w -t nat -A POSTROUTING -o %i -j MASQUERADE
PostDown = iptables -w -D FORWARD -i %i -j ACCEPT; iptables -w -D FORWARD -o %i -j ACCEPT; iptables -w -t nat -D POSTROUTING -o %i -j MASQUERADE
{% endif %}
{% endif %}

{% for peer in wg_peers %}
{% if peer.key_public != local_key_public %}
{% if ('endpoint' in local_record) or (peer is defined and 'endpoint' in peer and peer.endpoint|length) %}
# {{ peer.id|default('') }}
[Peer]
PublicKey = {{ peer.key_public }}
PersistentKeepalive = {{ wg_keepalive }}
{% if 'endpoint' in peer and peer.endpoint|length %}
Endpoint = {{ peer.endpoint }}:{{ wg_port }}
{% endif %}
{% if 'address' in peer or 'allowed' in peer %}
{#TODO: get both address and allowed to accept both string and/or arrays, and to typecase them properly #}
AllowedIPs = {{ ( [peer.address|default(false)]|select|list + peer.allowed|default([false])|select|list ) | select | list | join(',') }}
{% endif %}

{% endif %}
{% endif %}
{% endfor %}
